name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ develop, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install SSH Key for Production
        if: github.ref == 'refs/heads/main'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.PROD_KNOWN_HOSTS }}
          
      - name: Install SSH Key for Staging
        if: github.ref == 'refs/heads/develop'
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.STAGING_KNOWN_HOSTS }}
          
      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        env:
          POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
          REDIS_PASSWORD: ${{ secrets.PROD_REDIS_PASSWORD }}
          NODE_ENV: 'production'
          COMPOSE_FILE: 'docker-compose.prod.yml'
          STACK_NAME: 'task-management'
        run: |
          scp ${COMPOSE_FILE} ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:~/
          scp .env.production ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }}:~/.env
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} "
            export POSTGRES_USER='$POSTGRES_USER'
            export POSTGRES_PASSWORD='$POSTGRES_PASSWORD'
            export POSTGRES_DB='$POSTGRES_DB'
            export REDIS_PASSWORD='$REDIS_PASSWORD'
            export NODE_ENV='$NODE_ENV'
            docker stack deploy -c ${COMPOSE_FILE} ${STACK_NAME} --with-registry-auth
          "

      - name: Deploy to Staging
        if: github.ref == 'refs/heads/develop'
        env:
          POSTGRES_USER: ${{ secrets.STAGING_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.STAGING_POSTGRES_DB }}
          REDIS_PASSWORD: ${{ secrets.STAGING_REDIS_PASSWORD }}
          NODE_ENV: 'staging'
          COMPOSE_FILE: 'docker-compose.staging.yml'
          STACK_NAME: 'task-management-staging'
        run: |
          scp ${COMPOSE_FILE} ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }}:~/
          scp .env.staging ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }}:~/.env
          ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SSH_HOST }} "
            export POSTGRES_USER='$POSTGRES_USER'
            export POSTGRES_PASSWORD='$POSTGRES_PASSWORD'
            export POSTGRES_DB='$POSTGRES_DB'
            export REDIS_PASSWORD='$REDIS_PASSWORD'
            export NODE_ENV='$NODE_ENV'
            docker stack deploy -c ${COMPOSE_FILE} ${STACK_NAME} --with-registry-auth
          " 